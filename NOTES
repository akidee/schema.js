To do
----

1) New JSON schema draft:

a) The definition of "extends" in the current draft is flawed. I have described the issue in this thread: http://groups.google.com/group/json-schema/browse_thread/thread/275cdf7df754448b

Some implication of the current implementation:
i) The property "extends" in a JSON schema cannot be described completely by JSON Schema. See schemas/jsonSchemaCore.js
ii) Properties can be revalidated several times, same errors can be pushed several times.
iii) Schemas contradict each other.

If nobody cares, I will write a new draft with a better definition of "extends" and enhance schema.js according to it.

b) Be able to validate object keys (type: 'string' is implicit)

2) Better documentation of the basic concepts and the whole API.


type, if tolerant cast does not work
	set default...
	add Error
optional, if !optional && value not defined
	set default...
	add Error
enum, if enum does not contain value
	set default...
	add Error
maxDecimal, if too many decimals
	round
	set default...
	add Error
minimum/maximum, if our of range
	set default/minimum/maximum...
	add Error
minLength, if too short
	set default...
	add Error
maxLength, if too long
	shorten
	set default...
	add Error
pattern, if value does not match
	set default...
	add Error
requires, if is string and property is missing
	set default... for property
	add Error
additionalProperties, if false and found
	remove
	add Error
minItems, if <
	add Error
maxItems, if >
	remove
	add Error


3) Make a distinction between JSON and implementation specific - in this case JavaScript - representation of a schema. JSON is the exchange format - the JavaScript implementation must be able to be reserialized to its original format - a simple JavaScript object.
Strategy is to add JavaScript specific properties as additonal properties (e.g. RegExp instead of a string, schemas untouched by "extends" and $ref objects ...

4) Validate "id"

5) Be able to represent validation errors both as array (to get a simple list) and object tree that corresponds to the schema.
!: You can throw the whole array or object as error

6) schema.js needs to support async adapters and plugins. Constraint checking against a persistence layer ...

7) How can a schema as array of schemas be supported? The original object will be changed, so the original must be copied before an schema array is validated.

8) Check if property exists _before_ calling the checker (?)	

9) fallbacks belong to Validation!

10) Some guidelines:

- Keep interesting data separate: the schema, the validation, ...
- Make it clearer which data in the schema is part of the standard (Schema) and which data is needed for further purpose (Schema.Validation, ...)