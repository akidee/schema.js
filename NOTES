To do
----

The property "extends" in a JSON schema cannot be described completely by JSON Schema. See schemas/jsonSchemaCore.js - find a solution for this.
	
Documentation

Keine Daten verändern, sodass JSON.stringify ein korrektes JSON schema ausspuckt
	also keine echtes regexp, stattdessen zusätzliche Eigenschaft
	Ebenso requires usw.

An id must not have . and # 

Bei extends werden möglicherweise Dinge redundant validiert (was so sein kann, wenn zusätzliche Objekt eigenschaften definiert wurden). Errors (also path + name) sollten unique sein.

validations.errors should itself be an arry, but you can throw any object in JS anyway.

Nichtvererbbarkeit von properties:

zB optional=true überschreibt nicht optional=false
additionalProperties=false kann nicht von additionalProperties=true/{...} überschrieben werden

Besseres extends, das wirklich überschreibt, statt dass von unten nach oben validiert wird und sich Widersprüche ergeben?

Validation von addionalproperties.key/index als string!

Arguments to Array (cast)

Write new JSON Schema draft

async!

extends

Errors sowohl als Baum als auch als Liste

draft: Unterstützung von Schemas als Arrays von Schemas (wie dann Objekt manipulieren?)

UI

evtl. check nur aufrufen wenn existent, also if (this.schema.x) imnstance = this.x ...


To doc:

type, if tolerant cast does not work
	set default...
	add Error
optional, if !optional && value not defined
	set default...
	add Error
enum, if enum does not contain value
	set default...
	add Error
maxDecimal, if too many decimals
	round
	set default...
	add Error
minimum/maximum, if our of range
	set default/minimum/maximum...
	add Error
minLength, if too short
	set default...
	add Error
maxLength, if too long
	shorten
	set default...
	add Error
pattern, if value does not match
	set default...
	add Error
requires, if is string and property is missing
	set default... for property
	add Error
additionalProperties, if false and found
	remove
	add Error
minItems, if <
	add Error
maxItems, if >
	remove
	add Error
	

fallbacks sind nur für Validation, nicht Schema
plugins eher allgemein (für JSON-Kompatibilität)
Klar trennen zwischen Schema und Schema.x 
" Draft-kompatiblen properties und von ausschließlich x implizierten properties
" schema und Daten, die durch Schema.x erzeugt werden